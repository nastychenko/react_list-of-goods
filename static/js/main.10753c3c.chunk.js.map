{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isReversed","sortType","NONE","visibleGoods","goods","console","log","getReorderedGoods","this","sort","good1","good2","LENGTH","length","ALPHABET","localeCompare","reverse","className","type","classNames","onClick","setState","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,wGAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAgCE,IAAME,EAAb,4MACEC,MAAe,CACbC,YAAY,EACZC,SAAUL,EAASM,MAHvB,4CAME,WAAU,IAAD,OACDC,EA3BH,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUD,EACZ,EADYA,WAGNG,EAAY,YAAOC,GAMzB,OAFAC,QAAQC,IAAIL,EAAUD,GAEfG,EAgBgBI,CAAkBV,EAAiBW,KAAKT,OAC7D,EAAiCS,KAAKT,MAA9BE,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,WAmBlB,OAjBAG,EAAaM,MAAK,SAACC,EAAOC,GACxB,OAAQV,GACN,KAAKL,EAASgB,OACZ,OAAOF,EAAMG,OAASF,EAAME,OAE9B,KAAKjB,EAASkB,SACZ,OAAOJ,EAAMK,cAAcJ,GAE7B,QACE,OAAO,MAITX,GACFG,EAAaa,UAIb,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,SACA,UACA,CAAE,WAAYlB,IAAaL,EAASkB,WAGxCM,QAAS,WACP,EAAKC,SAAS,CAAEpB,SAAUL,EAASkB,YAVvC,iCAgBA,wBACEI,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,WAAYlB,IAAaL,EAASgB,SAGxCQ,QAAS,WACP,EAAKC,SAAS,CAAEpB,SAAUL,EAASgB,UAVvC,4BAgBA,wBACEM,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,YAAanB,IAGnBoB,QAAS,WACP,EAAKC,UAAS,SAAAtB,GAAK,MAAK,CACtBC,YAAaD,EAAMC,gBAXzB,sBAkBEA,GAAcC,IAAaL,EAASM,OACpC,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACP,EAAKC,SAAS,CACZrB,YAAY,EACZC,SAAUL,EAASM,QANzB,sBAcJ,6BACGC,EAAamB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,eAjGpC,GAAyBC,IAAMC,WC/C/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.10753c3c.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  render() {\n    const visibleGoods = getReorderedGoods(goodsFromServer, this.state);\n    const { sortType, isReversed } = this.state;\n\n    visibleGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n\n        case SortType.ALPHABET:\n          return good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n\n    if (isReversed) {\n      visibleGoods.reverse();\n    }\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={\n              classNames(\n                'button',\n                'is-info',\n                { 'is-light': sortType !== SortType.ALPHABET },\n              )\n            }\n            onClick={() => {\n              this.setState({ sortType: SortType.ALPHABET });\n            }}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={\n              classNames(\n                'button',\n                'is-success',\n                { 'is-light': sortType !== SortType.LENGTH },\n              )\n            }\n            onClick={() => {\n              this.setState({ sortType: SortType.LENGTH });\n            }}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={\n              classNames(\n                'button',\n                'is-warning',\n                { 'is-light': !isReversed },\n              )\n            }\n            onClick={() => {\n              this.setState(state => ({\n                isReversed: !state.isReversed,\n              }));\n            }}\n          >\n            Reverse\n          </button>\n\n          {(isReversed || sortType !== SortType.NONE) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                this.setState({\n                  isReversed: false,\n                  sortType: SortType.NONE,\n                });\n              }}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n        <ul>\n          {visibleGoods.map(good => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}